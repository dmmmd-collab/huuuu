import requests
import json
import time
import os
import random
from urllib.parse import urlparse, parse_qs

# B·∫£n ƒë·ªì (mapping) ƒë·ªÉ chuy·ªÉn ƒë·ªïi room_id th√†nh t√™n ph√≤ng
room_names_map = {
    "1": "Nh√† Kho",
    "2": "Ph√≤ng h·ªçp",
    "3": "Ph√≤ng gi√°m ƒë·ªëc",
    "4": "Ph√≤ng tr√≤ chuy·ªán",
    "5": "Ph√≤ng gi√°m s√°t",
    "6": "VƒÉn ph√≤ng",
    "7": "Ph√≤ng t√†i v·ª•",
    "8": "Ph√≤ng nh√¢n s·ª±",
}

# --- C√ÅC H√ÄM X·ª¨ L√ù D·ªÆ LI·ªÜU ---
def fetch_data(url, headers):
    """
    L·∫•y d·ªØ li·ªáu t·ª´ m·ªôt URL API v√† x·ª≠ l√Ω l·ªói.
    """
    try:
        response = requests.get(url, headers=headers, timeout=15)
        if response.status_code == 200:
            data = response.json()
            if isinstance(data, dict) and data.get('code') == 0:
                return data['data']
            else:
                print(f"L·ªói API: M√£ l·ªói kh√¥ng ph·∫£i 0. Ph·∫£n h·ªìi: {data}")
                return None
        else:
            print(f"L·ªói k·∫øt n·ªëi API: M√£ l·ªói HTTP {response.status_code}. Ph·∫£n h·ªìi: {response.text}")
            return None
    except (requests.exceptions.RequestException, json.JSONDecodeError) as e:
        print(f"L·ªói trong qu√° tr√¨nh k·∫øt n·ªëi ho·∫∑c ph√¢n t√≠ch d·ªØ li·ªáu: {e}")
        return None

def analyze_data(headers, asset_mode):
    """
    Ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ API v√† t√≠nh to√°n t·ªâ l·ªá an to√†n.
    """
    url_recent_10 = f"https://api.escapemaster.net/escape_game/recent_10_issues?asset={asset_mode}"
    url_recent_100 = f"https://api.escapemaster.net/escape_game/recent_100_issues?asset={asset_mode}"
    
    data_10 = fetch_data(url_recent_10, headers)
    data_100 = fetch_data(url_recent_100, headers)

    if data_10 is None or data_100 is None or not data_10:
        return None, [], "Ch∆∞a c√≥ th√¥ng tin", {}, {}

    current_issue_data = data_10[0]
    current_issue_id = current_issue_data.get('issue_id')
    
    killed_room_id = str(current_issue_data.get('killed_room_id'))
    current_killed_room_name = room_names_map.get(killed_room_id, "Ch∆∞a c√≥ th√¥ng tin")
    
    # T√≠nh to√°n t·ªâ l·ªá t·ª´ 10 v√°n g·∫ßn nh·∫•t
    killed_counts_10 = {str(i): 0 for i in range(1, 9)}
    for item in data_10:
        if isinstance(item, dict) and item.get('killed_room_id') is not None:
            killed_room_id_str = str(item['killed_room_id'])
            # ƒê·∫£m b·∫£o room_id n·∫±m trong danh s√°ch h·ª£p l·ªá
            if killed_room_id_str in killed_counts_10:
                killed_counts_10[killed_room_id_str] += 1
    survival_rates_10 = {room_names_map.get(room_id): (100 - (count / 10) * 100) for room_id, count in killed_counts_10.items()}
    
    # T√≠nh to√°n t·ªâ l·ªá t·ª´ 100 v√°n g·∫ßn nh·∫•t
    survival_rates_100 = {}
    room_killed_stats_100 = data_100.get('room_id_2_killed_times', {})
    for room_id in room_names_map.keys():
        room_name = room_names_map.get(room_id)
        count = room_killed_stats_100.get(room_id, 0)
        killed_rate = (count / 100) * 100
        survival_rates_100[room_name] = 100 - killed_rate
    
    # T√≠nh t·ªâ l·ªá an to√†n cu·ªëi c√πng b·∫±ng c√°ch k·∫øt h·ª£p t·ªâ l·ªá 10 v√°n v√† 100 v√°n
    final_survival_rates = {}
    for room_id in room_names_map.keys():
        room_name = room_names_map.get(room_id)
        rate_10 = survival_rates_10.get(room_name, 100)
        rate_100 = survival_rates_100.get(room_name, 100)
        
        # C√¥ng th·ª©c t·ªâ l·ªá k·∫øt h·ª£p c√≥ tr·ªçng s·ªë 70/30
        weighted_rate = (rate_10 * 0.7) + (rate_100 * 0.3)
        final_survival_rates[room_name] = weighted_rate

    # L·ªçc ra c√°c ph√≤ng c√≥ t·ªâ l·ªá an to√†n ch·∫•p nh·∫≠n ƒë∆∞·ª£c
    filtered_rooms = {room: rate for room, rate in final_survival_rates.items() if rate > 93.5}
    # S·∫Øp x·∫øp c√°c ph√≤ng ƒë√£ l·ªçc theo th·ª© t·ª± t·ªâ l·ªá an to√†n gi·∫£m d·∫ßn
    sorted_filtered_rates = sorted(filtered_rooms.items(), key=lambda item: item[1], reverse=True)
            
    return current_issue_id, sorted_filtered_rates, current_killed_room_name, survival_rates_10, survival_rates_100

def clear_screen():
    """X√≥a m√†n h√¨nh console."""
    os.system('cls' if os.name == 'nt' else 'clear')

# --- V√íNG L·∫∂P CH√çNH V√Ä HI·ªÇN TH·ªä ---
if __name__ == "__main__":
    user_id = "4456176"
    user_secret_key = "fb3e0927d8fa74dbc14378f14bc376dee8d47a9ee17089247d2b88112104fdf7"
    headers = {
        "Accept": "application/json, text/plain, */*",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36",
        "User-Id": user_id,
        "User-Secret-Key": user_secret_key
    }

    while True:
        clear_screen()
        print("="*50)
        print("         CH·ªåN CH·∫æ ƒê·ªò CH∆†I")
        print("="*50)
        print("1. WORLD (ƒê·ªìng xu v√†ng)")
        print("2. USDT (ƒê·ªìng xu b·∫°c)")
        print("3. BUILD (ƒê·ªìng xu kim c∆∞∆°ng)")
        print("4. Tho√°t")
        print("="*50)
        
        choice = input("Vui l√≤ng nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n (1-4): ")
        if choice == '1':
            asset_mode = "WORLD"
            break
        elif choice == '2':
            asset_mode = "USDT"
            break
        elif choice == '3':
            asset_mode = "BUILD"
            break
        elif choice == '4':
            print("ƒê√£ tho√°t ch∆∞∆°ng tr√¨nh.")
            exit()
        else:
            print("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng th·ª≠ l·∫°i.")
            time.sleep(2)
    
    pending_prediction_issue_id = None
    pending_prediction_room_name = None
    
    total_games_played = 0
    total_wins = 0
    current_win_streak = 0
    
    while True:
        current_issue_id, sorted_filtered_rates, current_killed_room_name, survival_rates_10, survival_rates_100 = analyze_data(headers, asset_mode)

        if current_issue_id is None:
            clear_screen()
            print("Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu t·ª´ API. ƒêang th·ª≠ l·∫°i...")
            time.sleep(5)
            continue
        
        if pending_prediction_issue_id is not None and str(pending_prediction_issue_id) == str(current_issue_id):
            clear_screen()
            print("="*50)
            print(f"            K·∫æT QU·∫¢ K√å {pending_prediction_issue_id} [{asset_mode}]")
            print("="*50)
            
            if pending_prediction_room_name:
                print(f"AI ƒë√£ ch·ªçn ph√≤ng: **{pending_prediction_room_name}**")
                print(f"S√°t th·ªß ƒë√£ ch·ªçn ph√≤ng: **{current_killed_room_name}**\n")
                
                total_games_played += 1
                
                if current_killed_room_name and current_killed_room_name != pending_prediction_room_name:
                    print("üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ th·∫Øng!")
                    total_wins += 1
                    current_win_streak += 1
                else:
                    print("üòÖ R·∫•t ti·∫øc, b·∫°n ƒë√£ thua.")
                    current_win_streak = 0
            else:
                print("AI ƒë√£ kh√¥ng ch·ªçn ph√≤ng trong k√¨ tr∆∞·ªõc, kh√¥ng c√≥ k·∫øt qu·∫£ ƒë·ªÉ t√≠nh.")
            
            pending_prediction_issue_id = None
            pending_prediction_room_name = None
            
            time.sleep(5) 

        clear_screen()
        print("="*50)
        prediction_issue_id = str(int(current_issue_id) + 1)
        print(f"            D·ª∞ ƒêO√ÅN T·ªà L·ªÜ TH·∫ÆNG | K√å {prediction_issue_id} [{asset_mode}]")
        print("="*50)

        win_rate = (total_wins / total_games_played) * 100 if total_games_played > 0 else 0
        print(f"--- TH·ªêNG K√ä BOT ---")
        print(f"T·ªïng s·ªë v√°n ch∆°i: {total_games_played}")
        print(f"T·ªïng s·ªë v√°n th·∫Øng: {total_wins}")
        print(f"Chu·ªói th·∫Øng li√™n ti·∫øp: {current_win_streak}")
        print(f"T·ªâ l·ªá th·∫Øng: {win_rate:.2f}%\n")
        
        # --- LOGIC D·ª∞ ƒêO√ÅN M·ªöI ƒê√É ƒê∆Ø·ª¢C T·ªêI ∆ØU ---
        best_room_name_for_next = None
        best_room_rate = 0.0

        if sorted_filtered_rates:
            # L·∫•y t·ªâ l·ªá cao nh·∫•t t·ª´ danh s√°ch ƒë√£ s·∫Øp x·∫øp
            highest_rate = sorted_filtered_rates[0][1]
            
            # T√¨m t·∫•t c·∫£ c√°c ph√≤ng c√≥ t·ªâ l·ªá cao nh·∫•t ƒë√≥ (tr∆∞·ªùng h·ª£p h√≤a)
            tied_rooms = [room_tuple[0] for room_tuple in sorted_filtered_rates if room_tuple[1] == highest_rate]
            
            if len(tied_rooms) > 1:
                # N·∫øu c√≥ nhi·ªÅu ph√≤ng h√≤a nhau, √°p d·ª•ng ti√™u ch√≠ ph·ª•: 
                # Ch·ªçn ph√≤ng c√≥ t·ªâ l·ªá s·ªëng s√≥t cao nh·∫•t trong 10 v√°n g·∫ßn nh·∫•t
                best_room_for_tie_breaker = None
                best_rate_10 = -1.0
                for room_name in tied_rooms:
                    rate_10 = survival_rates_10.get(room_name, 0)
                    if rate_10 > best_rate_10:
                        best_rate_10 = rate_10
                        best_room_for_tie_breaker = room_name
                best_room_name_for_next = best_room_for_tie_breaker
            else:
                # N·∫øu ch·ªâ c√≥ m·ªôt ph√≤ng t·ªët nh·∫•t, ch·ªçn ph√≤ng ƒë√≥
                best_room_name_for_next = tied_rooms[0]

            best_room_rate = highest_rate

        if best_room_name_for_next:
            print(f"ü•á AI ch·ªçn ph√≤ng: **{best_room_name_for_next}** - T·ªâ l·ªá s·ªëng s√≥t: **{best_room_rate:.2f}%**\n")
        else:
            print(f"‚ùå AI kh√¥ng ch·ªçn ph√≤ng trong k√¨ n√†y.\n")
        
        print(f"üî™ S√°t th·ªß ƒë√£ ch·ªçn ph√≤ng: **{current_killed_room_name}**\n")
        
        print("--- TOP ph√≤ng an to√†n nh·∫•t (< 93.5%) ---")
        if sorted_filtered_rates:
            for i, (room_name, rate) in enumerate(sorted_filtered_rates, 1):
                rate_10 = survival_rates_10.get(room_name, 100)
                rate_100 = survival_rates_100.get(room_name, 100)
                print(f"[{i}] {room_name}: {rate:.2f}% (T·ª´ 10 v√°n: {rate_10:.2f}%, T·ª´ 100 v√°n: {rate_100:.2f}%)")
        else:
            print("Ch∆∞a c√≥ ƒë·ªß ph√≤ng ƒë·ªÉ x·∫øp h·∫°ng.")

        print("="*50 + "\n")
        
        pending_prediction_issue_id = prediction_issue_id
        pending_prediction_room_name = best_room_name_for_next
        
        countdown_up = 1
        while True:
            time.sleep(1)
            print(f"ƒêang ch·ªù d·ªØ li·ªáu k√¨ m·ªõi t·ª´ API... {countdown_up} gi√¢y", end='\r')
            countdown_up += 1
            new_issue_id, _, _, _, _ = analyze_data(headers, asset_mode)
            if new_issue_id and new_issue_id != current_issue_id:
                print("\nüéâ ƒê√£ c√≥ d·ªØ li·ªáu k√¨ m·ªõi! ƒêang x·ª≠ l√Ω...")
                break
